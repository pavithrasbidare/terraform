name: Deploy Terraform

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code for Deployment
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Install Git LFS
      - name: Install Git LFS
        run: |
          git lfs install

      # Step 3: Track Large Files with Git LFS
      - name: Track Large Files with Git LFS
        run: |
          git lfs track "Usecase_1/Infra/.terraform/providers/registry.terraform.io/hashicorp/aws/5.88.0/linux_amd64/terraform-provider-aws_v5.88.0_x5"
          git add .gitattributes  # Make sure to add the .gitattributes file that git-lfs uses

      # Step 4: Commit Changes (If Needed)
      - name: Commit Changes (if any)
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git commit -m "Add Terraform provider binary to Git LFS" || echo "No changes to commit"

      # Step 5: Push Changes to GitHub
      - name: Push Changes
        run: |
          git push origin ${{ github.event.pull_request.head.ref || github.ref }}

      # Step 6: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::302263075199:role/OIDC-Terraform
          aws-region: us-west-2

      # Step 7: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      # Step 8: Terraform Init & Plan
      - name: Terraform Init
        run: terraform init
        working-directory: ./Usecase_1/Infra

      - name: Terraform Plan
        run: terraform plan -var-file=../Env/terraform.tfvars
        working-directory: ./Usecase_1/Infra

      # Step 9: Generate Terraform Docs Markdown
      - name: Generate Markdown with Terraform Docs
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: terraform-docs/gh-actions@v1.3.0
        with:
          working-dir: ./Usecase_1/Infra
          output-file: README.md
          output-method: inject
          git-push: true
          config-file: .terraform-docs.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 10: Configure Git to Commit Generated Docs
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # Step 11: Add README.md as PR Comment (Using Sticky Comment)
      - name: Post README.md as PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          header: "Terraform Documentation ðŸ“–"
          path: "./Usecase_1/Infra/README.md"

      # Step 12: Apply Terraform Changes on PR Merge
      - name: Apply Terraform on Merge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd ./Usecase_1/Infra
          terraform init
          terraform apply -var-file=../Env/terraform.tfvars -auto-approve
