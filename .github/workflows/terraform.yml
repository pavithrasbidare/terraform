name: Infra Provisioning through Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (e.g., dev, staging, prod)"
        required: true
        default: "dev"
        type: choice
        options:
        - dev
        - staging
        - prod

  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Install TFLint
        run: |
          TFLINT_VERSION="v0.55.0"
          curl -sL "https://github.com/terraform-linters/tflint/releases/download/${TFLINT_VERSION}/tflint_linux_amd64.zip" -o tflint.zip
          
          if [ ! -s "tflint.zip" ]; then
            echo "Error: Downloaded TFLint archive is empty or invalid."
            exit 1
          fi

          unzip tflint.zip
          chmod +x tflint
          sudo mv tflint /usr/local/bin/
          rm tflint.zip
          
          echo "TFLint installed successfully:"
          tflint --version

      # Step: Run TFLint
      - name: Run TFLint
        run: |
         cd Infra/Environments/${{ github.event.inputs.environment || 'dev' }}

         # Ensure .tflint.hcl exists
         if [ ! -f ".tflint.hcl" ]; then
            cat <<EOF > .tflint.hcl
            plugin "terraform" {
            enabled = true
           }
         EOF
         fi

         # Install TFLint plugin (Terraform)
         tflint --init

         # Run TFLint with proper syntax
         tflint --config .tflint.hcl

      # Step: Install Checkov
      - name: Install Checkov
        run: |
          pip install checkov
          checkov --version

      # Step: Run Checkov Security Scan
      - name: Run Checkov
        run: |
          cd Infra/Environments/${{ github.event.inputs.environment || 'dev' }}
          checkov --directory . --skip-check CKV_AWS_*,CKV2_AWS_*

      # Step: Configure AWS Credentials using OIDC
      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::302263075199:role/OIDC-Terraform  # Your specific IAM role ARN
          aws-region: us-west-2  # AWS region you are working with
          web-identity-token-file: ${{ github.token }}  # GitHub OIDC token for authentication
          role-session-name: github-actions-session

      # Step: Terraform Init
      - name: Terraform Init
        run: | 
          cd Infra/Environments/${{ github.event.inputs.environment || 'dev' }}
          terraform init

      # Step: Run Terraform Validate (validate configuration files)
      - name: Terraform Validate
        run: |
          cd Infra/Environments/${{ github.event.inputs.environment || 'dev' }}
          terraform validate

      # Step: Terraform Workspace Select
      - name: Terraform Workspace Select
        run: |
          cd Infra/Environments/${{ github.event.inputs.environment || 'dev' }}
          terraform workspace select ${{ github.event.inputs.environment || 'dev' }} || terraform workspace new ${{ github.event.inputs.environment || 'dev' }}

      # Step: Terraform Plan
      - name: Terraform Plan
        run: |
          cd Infra/Environments/${{ github.event.inputs.environment || 'dev' }} 
          terraform plan -var-file="${{ github.event.inputs.environment || 'dev' }}-var.tfvars" -out=tfplan

      # Step: Checkout Repository for PR
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref }} 
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step: Configure Git for committing generated README.md
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # Step: Generate Markdown with Terraform Docs
      - name: Generate Markdown with Terraform Docs
        if: ${{ github.event_name == 'pull_request' }}
        uses: terraform-docs/gh-actions@v1.3.0
        with:
          working-dir: Infra/Environments/${{ github.event.inputs.environment || 'dev' }}
          output-file: README.md
          output-method: inject
          git-push: true
          config-file: .terraform-docs.yml

      # **New Step: Add README.md to PR Comment using Sticky Comment**
      - name: Post README.md as PR Comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          header: "Terraform Documentation ðŸ“–"
          path: "Infra/Environments/${{ github.event.inputs.environment || 'dev' }}/README.md"

      # Step: Apply Terraform if PR is merged
      - name: Apply Terraform on Merge the PR
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          cd Infra/Environments/${{ github.event.inputs.environment || 'dev' }}
          terraform init
          terraform apply -auto-approve -var-file="${{ github.event.inputs.environment || 'dev' }}-var.tfvars"
